# The black code formatter in Python is an opinionated tool that formats your code in the best way possible.
[tool.black]
line-length = 119
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | setup.py
)/
'''

# The pylint code linter in Python is an opinionated tool that valides the code in the best way possible.
[tool.pylint.master]
ignore = ["setup.py", "tests"]
jobs = 0
py-version = 3.11
load-plugins = [
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.code_style",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.mccabe",
    "pylint.extensions.docstyle",
    "pylint.extensions.check_elif",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.docparams",
    "pylint.extensions.empty_comment",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used"
]

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 119
disable = [
    "broad-exception-caught",
    "consider-ternary-expression",
    "consider-alternative-union-syntax",
    "else-if-used",
    "duplicate-code",
    "import-error",
    "import-outside-toplevel",
    "logging-not-lazy",
    "logging-fstring-interpolation",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-complex",
    "too-many-arguments",
    "too-many-statements",
    "too-many-locals",
    "too-many-positional-arguments",
    "too-few-public-methods",
    "too-many-try-statements",
    "while-used"
]

[tool.pylint.'TYPECHECK']
ignored-classes = "TextFileReader"

# The isort formatter is a Python utility / library to sort imports alphabetically and automatically separate into sections and by type.
[tool.isort]
profile = "black"
line_length = 119
multi_line_output = 3
combine_as_imports = true
ensure_newline_before_comments = true
include_trailing_comma = true
force_sort_within_sections = true
use_parentheses = true
skip = [".gitignore", ".dockerignore", "setup.py"]
known_first_party = ["ya-lstm"]  # Replace with your actual project name
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"

# Pytest path configuration
[tool.pytest.ini_options]
assertmode = "plain"
pythonpath = [
    "."
]
testpaths = [
    "tests.integration",
    "tests.unit"
]
python_files = "test_*"

# Pytest coverage
[tool.coverage.run]
omit = [
    "setup.py",
    "tests/**/__init__.py"
]

# Python documentation formatting tool
[tool.pydocstyle]
match_dir = '^(?!(venv|.eggs|tmp|build|dist|ext|ext_bin)).*'
match = '^(?!(version)).*.py'
add-ignore = "D412"